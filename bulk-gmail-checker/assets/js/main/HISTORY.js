const DB_NAME="GmailCheckerHistory",DB_VERSION=1,STORE_NAME="checkHistory";let db=null;async function initDB(){return new Promise(((e,t)=>{const s=indexedDB.open(DB_NAME,DB_VERSION);s.onerror=()=>t(s.error),s.onsuccess=()=>{db=s.result,e(db)},s.onupgradeneeded=e=>{const t=e.target.result;if(!t.objectStoreNames.contains(STORE_NAME)){const e=t.createObjectStore(STORE_NAME,{keyPath:"id",autoIncrement:!0});e.createIndex("timestamp","timestamp",{unique:!1}),e.createIndex("filename","filename",{unique:!1})}}}))}function generateFilename(e){const t=new Date,s=t.toISOString().slice(0,10).replace(/-/g,"-"),r=t.toTimeString().slice(0,8).replace(/:/g,"-");let i;return i=isLanguageID?`Riwayat-${e}Gmails-BulkGmailChecker_${s}_${r}`:`History-${e}Gmails-BulkGmailChecker_${s}_${r}`,i}async function saveCheckHistory(e,t){db||await initDB();try{const s=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME),r={timestamp:Date.now(),filename:generateFilename(e.length),emailCount:e.length,results:e,serverInfo:t,stats:{live:e.filter((e=>"live"===e.status)).length,verify:e.filter((e=>"verify"===e.status)).length,disabled:e.filter((e=>"disabled"===e.status)).length,unregistered:e.filter((e=>"unregistered"===e.status)).length,bad:e.filter((e=>"bad"===e.status)).length}},i=s.add(r);return new Promise(((e,t)=>{i.onsuccess=()=>e(i.result),i.onerror=()=>t(i.error)}))}catch(e){throw console.error("Error saving history:",e),e}}async function getAllHistory(){return db||await initDB(),new Promise(((e,t)=>{const s=db.transaction([STORE_NAME],"readonly").objectStore(STORE_NAME).index("timestamp").openCursor(null,"prev"),r=[];s.onsuccess=t=>{const s=t.target.result;s?(r.push(s.value),s.continue()):e(r)},s.onerror=()=>t(s.error)}))}async function getHistoryItem(e){return db||await initDB(),new Promise(((t,s)=>{const r=db.transaction([STORE_NAME],"readonly").objectStore(STORE_NAME).get(e);r.onsuccess=()=>t(r.result),r.onerror=()=>s(r.error)}))}async function deleteHistoryItem(e){return db||await initDB(),new Promise(((t,s)=>{const r=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME).delete(e);r.onsuccess=()=>t(),r.onerror=()=>s(r.error)}))}async function clearAllHistory(){return db||await initDB(),new Promise(((e,t)=>{const s=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME).clear();s.onsuccess=()=>e(),s.onerror=()=>t(s.error)}))}function formatDate(e){return new Date(e).toLocaleString()}async function loadHistory(){try{await new Promise((e=>setTimeout(e,50)));const e=document.getElementById("history-list"),t=document.getElementById("total-checks"),s=document.getElementById("total-emails");if(!e||!t||!s)return console.error("History elements not found in DOM"),myAccountModal?void 0:(await createMyAccountModal(),await loadHistory());e.innerHTML="<p>Loading history...</p>";const r=await getAllHistory();isLanguageID?t.textContent=`Total Riwayat: ${r.length}`:t.textContent=`Total History: ${r.length}`;const i=r.reduce(((e,t)=>e+t.emailCount),0);if(s.textContent=`Total Gmail: ${i}`,0===r.length){let t;return t=isLanguageID?' <div class="empty-history"> <i class="fas fa-history fa-2x" style="margin-bottom: 10px;"></i> <p>Tidak ditemukan riwayat pengecekan Gmail</p> <p style="font-size: 0.9em;">Riwayat pengecekan Gmail Kamu akan muncul di sini</p> </div> ':' <div class="empty-history"> <i class="fas fa-history fa-2x" style="margin-bottom: 10px;"></i> <p>No Gmail check history found</p> <p style="font-size: 0.9em;">Your check results will appear here</p> </div> ',void(e.innerHTML=t)}let o="";r.forEach((e=>{let t,s="",r="";!e.serverInfo||e.serverInfo.isNormalServer?(s=` <span>${e.emailCount} emails | </span> <span class="status-live">Live: ${e.stats.live} | </span> <span class="status-verify">Verify: ${e.stats.verify} | </span> <span class="status-disabled">Disabled: ${e.stats.disabled} | </span> <span class="status-unregistered">Unregistered: ${e.stats.unregistered} | </span> <span class="status-bad">Bad: ${e.stats.bad}</span>  `,r='<span style="color: #ffffff;"> - Normal Server</span>'):(s=` <span>${e.emailCount} emails | </span> <span class="status-live">Live: ${e.stats.live} | </span> <span class="status-bad">Bad: ${e.stats.bad}</span> `,r='<span style="color: #ffff00;"> - Fast Server</span>'),t=isLanguageID?"Klik untuk membuka":"Click to open",o+=` <div class="history-item" data-id="${e.id}"> <div class="history-actions"> <button class="history-btn open" title="Open in results"><i class="fas fa-folder-open"></i></button> <button class="history-btn copy" title="Copy results"><i class="fas fa-copy"></i></button> <button class="history-btn download" title="Download results"><i class="fas fa-download"></i></button> <button class="history-btn delete" title="Delete history"><i class="fas fa-trash"></i></button> </div> <div class="history-info"> <div class="history-click-indicator"><i class="fa-solid fa-magnifying-glass"></i> <i>${t}</i></div> <div class="history-filename">${e.filename}</div> <div class="history-date" style="font-style: italic; font-size: 0.8em; color: #ffe6cc">${formatDate(e.timestamp)}<span class="history-server"> ${r}</span></div> <div class="history-meta"> ${s}</div> </div> </div> `})),e.innerHTML=o,document.querySelectorAll(".history-item").forEach((e=>{const t=parseInt(e.dataset.id);e.addEventListener("click",(e=>{e.target.closest(".history-btn")||openHistoryItem(t)})),e.querySelector(".history-btn.open")?.addEventListener("click",(e=>{e.stopPropagation(),openHistoryItem(t)})),e.querySelector(".history-btn.copy")?.addEventListener("click",(e=>{e.stopPropagation(),copyHistoryItem(t,e)})),e.querySelector(".history-btn.download")?.addEventListener("click",(e=>{e.stopPropagation(),downloadHistoryItem(t)})),e.querySelector(".history-btn.delete")?.addEventListener("click",(e=>{e.stopPropagation(),deleteHistoryItemUI(t)}))}))}catch(e){console.error("Error loading history:",e);const t=document.getElementById("history-list");t&&(t.innerHTML='<p class="status-error">Error loading history</p>')}}async function openHistoryItem(e){try{const t=await getHistoryItem(e);if(!t)return void alert("History item not found");if(results=t.results,t.serverInfo){t.serverInfo.isNormalServer?(verifyFilterBtn.classList.remove("hidden"),unregisteredFilterBtn.classList.remove("hidden"),disabledFilterBtn.classList.remove("hidden")):(verifyFilterBtn.classList.add("hidden"),unregisteredFilterBtn.classList.add("hidden"),disabledFilterBtn.classList.add("hidden"))}else verifyFilterBtn.classList.remove("hidden"),unregisteredFilterBtn.classList.remove("hidden"),disabledFilterBtn.classList.remove("hidden");updateCounters(),displayResults(),inputSection.classList.add("hidden"),outputSection.classList.remove("hidden"),inputButtonContainer.classList.add("hidden"),outputButtonContainer.classList.remove("hidden"),closeMyAccountModal(),systemMessage.style.innerHTML="",systemMessage.style.cssText="",systemMessage.style.color="yellow",systemMessage.textContent=`${t.filename}`,isLanguageID?resultTitle.textContent="RIWAYAT HASIL PENGECEKAN":resultTitle.textContent="RESULTS HISTORY",backgroundGlow.style.cssText="background: radial-gradient(circle, rgba(255, 190, 0, 0.2) 0%, rgba(120, 192, 219, 1) 60%, rgba(255, 107, 0, 0.3) 100%);animation: pulseGlow 10s infinite alternate ease-in-out;",document.querySelector("main").style.background="#665200",resetBtn.classList.add("hidden"),backMyAccountBtn.classList.remove("hidden"),errorInfo.classList.add("hidden"),serverSelectionContainer.classList.add("hidden"),blockUpdateMessages(!0)}catch(e){console.error("Error opening history item:",e),alert("Failed to open history item")}}async function copyHistoryItem(e,t){try{const s=await getHistoryItem(e);if(!s)return void alert("History item not found");const r=s.results.map((e=>e.email)).join("\n");await navigator.clipboard.writeText(r);const i=t.target.closest(".history-btn.copy"),o=i.innerHTML;i.innerHTML='<i class="fas fa-check"></i>',i.style.backgroundColor="rgba(0, 255, 127, 0.4)",setTimeout((()=>{i.innerHTML=o,i.style.backgroundColor=""}),2e3)}catch(e){console.error("Error copying history item:",e),alert("Failed to copy history item")}}async function downloadHistoryItem(e){try{const t=await getHistoryItem(e);if(!t)return void alert("History item not found");const s=t.results.map((e=>e.email)).join("\n"),r=new Blob([s],{type:"text/plain"}),i=URL.createObjectURL(r),o=document.createElement("a");o.href=i,o.download=`${t.filename}.txt`,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(i)}catch(e){console.error("Error downloading history item:",e),alert("Failed to download history item")}}async function deleteHistoryItemUI(e){if(confirm("Are you sure you want to delete this history item?"))try{await deleteHistoryItem(e);const t=document.querySelector(`.history-item[data-id="${e}"]`);t&&(t.style.opacity="0.5",setTimeout((()=>{t.remove(),loadHistory()}),300))}catch(e){console.error("Error deleting history item:",e),alert("Failed to delete history item")}}async function clearAllHistoryUI(){if(confirm("Are you sure you want to clear all history? This action cannot be undone."))try{await clearAllHistory(),await loadHistory()}catch(e){console.error("Error clearing history:",e),alert("Failed to clear history")}}async function initHistorySystem(){try{await initDB()}catch(e){console.error("Failed to initialize history system:",e)}}async function saveCurrentResults(){try{if(!results||0===results.length)return void console.warn("No results to save to history");if(db||await initHistorySystem(),"function"!=typeof saveCheckHistory)return void console.error("saveCheckHistory function not available");const e={serverType:selectedServer,isNormalServer:"server1"===selectedServer||"server2"===selectedServer};await saveCheckHistory(results,e)}catch(e){console.error("Failed to save results to history:",e)}}