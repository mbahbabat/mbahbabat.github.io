const DB_NAME="GmailCheckerHistory",DB_VERSION=1,STORE_NAME="checkHistory";let db=null;async function initDB(){return new Promise(((t,e)=>{const s=indexedDB.open(DB_NAME,DB_VERSION);s.onerror=()=>e(s.error),s.onsuccess=()=>{db=s.result,t(db)},s.onupgradeneeded=t=>{const e=t.target.result;if(!e.objectStoreNames.contains(STORE_NAME)){const t=e.createObjectStore(STORE_NAME,{keyPath:"id",autoIncrement:!0});t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("filename","filename",{unique:!1})}}}))}function generateFilename(t){const e=new Date,s=e.toISOString().slice(0,10).replace(/-/g,"-"),i=e.toTimeString().slice(0,8).replace(/:/g,"-");let r;return r=isLangID?`Riwayat-${t}Gmails-BulkGmailChecker_${s}_${i}`:`History-${t}Gmails-BulkGmailChecker_${s}_${i}`,r}async function saveCheckHistory(t,e){db||await initDB();try{const s=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME),i={timestamp:Date.now(),filename:generateFilename(t.length),emailCount:t.length,results:t,serverInfo:e,stats:{live:t.filter((t=>"live"===t.status)).length,verify:t.filter((t=>"verify"===t.status)).length,disabled:t.filter((t=>"disabled"===t.status)).length,unregistered:t.filter((t=>"unregistered"===t.status)).length,bad:t.filter((t=>"bad"===t.status)).length}},r=s.add(i);return new Promise(((t,e)=>{r.onsuccess=()=>t(r.result),r.onerror=()=>e(r.error)}))}catch(t){throw console.error("Error saving history:",t),t}}async function getAllHistory(){return db||await initDB(),new Promise(((t,e)=>{const s=db.transaction([STORE_NAME],"readonly").objectStore(STORE_NAME).index("timestamp").openCursor(null,"prev"),i=[];s.onsuccess=e=>{const s=e.target.result;s?(i.push(s.value),s.continue()):t(i)},s.onerror=()=>e(s.error)}))}async function getHistoryItem(t){return db||await initDB(),new Promise(((e,s)=>{const i=db.transaction([STORE_NAME],"readonly").objectStore(STORE_NAME).get(t);i.onsuccess=()=>e(i.result),i.onerror=()=>s(i.error)}))}async function deleteHistoryItem(t){return db||await initDB(),new Promise(((e,s)=>{const i=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME).delete(t);i.onsuccess=()=>e(),i.onerror=()=>s(i.error)}))}async function clearAllHistory(){return db||await initDB(),new Promise(((t,e)=>{const s=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME).clear();s.onsuccess=()=>t(),s.onerror=()=>e(s.error)}))}function formatDate(t){return new Date(t).toLocaleString()}async function loadHistory(){try{await new Promise((t=>setTimeout(t,50)));const t=document.getElementById("history-list"),e=document.getElementById("total-checks"),s=document.getElementById("total-emails");if(!t||!e||!s)return console.error("History elements not found in DOM"),myAccountModal?void 0:(await createMyAccountModal(),await loadHistory());t.innerHTML="<p>Loading history...</p>";const i=await getAllHistory();isLangID?e.textContent=`Total Riwayat: ${i.length}`:e.textContent=`Total History: ${i.length}`;const r=i.reduce(((t,e)=>t+e.emailCount),0);if(s.textContent=`Total Gmail: ${r}`,0===i.length){let e;return e=isLangID?' <div class="empty-history"> <i class="fas fa-history fa-2x" style="margin-bottom: 10px;"></i> <p>Tidak ditemukan riwayat pengecekan Gmail</p> <p style="font-size: 0.9em;">Riwayat pengecekan Gmail Kamu akan muncul di sini</p> </div> ':' <div class="empty-history"> <i class="fas fa-history fa-2x" style="margin-bottom: 10px;"></i> <p>No Gmail check history found</p> <p style="font-size: 0.9em;">Your check results will appear here</p> </div> ',void(t.innerHTML=e)}let o="";i.forEach((t=>{let e="",s="";!t.serverInfo||t.serverInfo.isNormalServer?(e=` <span>${t.emailCount} emails | </span> <span class="status-live">Live: ${t.stats.live} | </span> <span class="status-verify">Verify: ${t.stats.verify} | </span> <span class="status-disabled">Disabled: ${t.stats.disabled} | </span> <span class="status-unregistered">Unregistered: ${t.stats.unregistered} | </span> <span class="status-bad">Bad: ${t.stats.bad}</span>  `,s='<span style="color: #ffffff;"> - Normal Server</span>'):(e=` <span>${t.emailCount} emails | </span> <span class="status-live">Live: ${t.stats.live} | </span> <span class="status-bad">Bad: ${t.stats.bad}</span> `,s='<span style="color: #ffff00;"> - Fast Server</span>'),o+=` <div class="history-item" data-id="${t.id}"> <div class="history-actions"> <button class="history-btn open" title="Open in results"><i class="fas fa-folder-open"></i></button> <button class="history-btn copy" title="Copy results"><i class="fas fa-copy"></i></button> <button class="history-btn download" title="Download results"><i class="fas fa-download"></i></button> <button class="history-btn delete" title="Delete history"><i class="fas fa-trash"></i></button> </div> <div class="history-info"> <div class="history-click-indicator"><i class="fa-solid fa-magnifying-glass"></i> <i>Click to open</i></div> <div class="history-filename">${t.filename}</div> <div class="history-date" style="font-style: italic; font-size: 0.8em; color: #ffe6cc">${formatDate(t.timestamp)}<span class="history-server"> ${s}</span></div> <div class="history-meta"> ${e}</div> </div> </div> `})),t.innerHTML=o,document.querySelectorAll(".history-item").forEach((t=>{const e=parseInt(t.dataset.id);t.addEventListener("click",(t=>{t.target.closest(".history-btn")||openHistoryItem(e)})),t.querySelector(".history-btn.open")?.addEventListener("click",(t=>{t.stopPropagation(),openHistoryItem(e)})),t.querySelector(".history-btn.copy")?.addEventListener("click",(t=>{t.stopPropagation(),copyHistoryItem(e,t)})),t.querySelector(".history-btn.download")?.addEventListener("click",(t=>{t.stopPropagation(),downloadHistoryItem(e)})),t.querySelector(".history-btn.delete")?.addEventListener("click",(t=>{t.stopPropagation(),deleteHistoryItemUI(e)}))}))}catch(t){console.error("Error loading history:",t);const e=document.getElementById("history-list");e&&(e.innerHTML='<p class="status-error">Error loading history</p>')}}async function openHistoryItem(t){try{const e=await getHistoryItem(t);if(!e)return void alert("History item not found");if(results=e.results,e.serverInfo){e.serverInfo.isNormalServer?(verifyFilterBtn.classList.remove("hidden"),unregisteredFilterBtn.classList.remove("hidden"),disabledFilterBtn.classList.remove("hidden")):(verifyFilterBtn.classList.add("hidden"),unregisteredFilterBtn.classList.add("hidden"),disabledFilterBtn.classList.add("hidden"))}else verifyFilterBtn.classList.remove("hidden"),unregisteredFilterBtn.classList.remove("hidden"),disabledFilterBtn.classList.remove("hidden");updateCounters(),displayResults(),inputSection.classList.add("hidden"),outputSection.classList.remove("hidden"),inputButtonContainer.classList.add("hidden"),outputButtonContainer.classList.remove("hidden"),closeMyAccountModal(),systemMessage.style.innerHTML="",systemMessage.style.cssText="",systemMessage.style.color="yellow",systemMessage.textContent=`${e.filename}`,isLangID?resultTitle.textContent="RIWAYAT HASIL PENGECEKAN":resultTitle.textContent="RESULTS HISTORY",backgroundGlow.style.cssText="background: radial-gradient(circle, rgba(255, 190, 0, 0.2) 0%, rgba(120, 192, 219, 1) 60%, rgba(255, 107, 0, 0.3) 100%);animation: pulseGlow 10s infinite alternate ease-in-out;",document.querySelector("main").style.background="#665200",resetBtn.classList.add("hidden"),backMyAccountBtn.classList.remove("hidden"),errorInfo.classList.add("hidden"),serverSelectionContainer.classList.add("hidden"),blockUpdateMessages(!0)}catch(t){console.error("Error opening history item:",t),alert("Failed to open history item")}}async function copyHistoryItem(t,e){try{const s=await getHistoryItem(t);if(!s)return void alert("History item not found");const i=s.results.map((t=>t.email)).join("\n");await navigator.clipboard.writeText(i);const r=e.target.closest(".history-btn.copy"),o=r.innerHTML;r.innerHTML='<i class="fas fa-check"></i>',r.style.backgroundColor="rgba(0, 255, 127, 0.4)",setTimeout((()=>{r.innerHTML=o,r.style.backgroundColor=""}),2e3)}catch(t){console.error("Error copying history item:",t),alert("Failed to copy history item")}}async function downloadHistoryItem(t){try{const e=await getHistoryItem(t);if(!e)return void alert("History item not found");const s=e.results.map((t=>t.email)).join("\n"),i=new Blob([s],{type:"text/plain"}),r=URL.createObjectURL(i),o=document.createElement("a");o.href=r,o.download=`${e.filename}.txt`,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(r)}catch(t){console.error("Error downloading history item:",t),alert("Failed to download history item")}}async function deleteHistoryItemUI(t){if(confirm("Are you sure you want to delete this history item?"))try{await deleteHistoryItem(t);const e=document.querySelector(`.history-item[data-id="${t}"]`);e&&(e.style.opacity="0.5",setTimeout((()=>{e.remove(),loadHistory()}),300))}catch(t){console.error("Error deleting history item:",t),alert("Failed to delete history item")}}async function clearAllHistoryUI(){if(confirm("Are you sure you want to clear all history? This action cannot be undone."))try{await clearAllHistory(),await loadHistory()}catch(t){console.error("Error clearing history:",t),alert("Failed to clear history")}}async function initHistorySystem(){try{await initDB()}catch(t){console.error("Failed to initialize history system:",t)}}async function saveCurrentResults(t){try{if(!results||0===results.length)return void console.warn("No results to save to history");if(db||await initHistorySystem(),"function"!=typeof saveCheckHistory)return void console.error("saveCheckHistory function not available");const e={serverType:t,isNormalServer:"normal"===t};await saveCheckHistory(results,e)}catch(t){console.error("Failed to save results to history:",t)}}