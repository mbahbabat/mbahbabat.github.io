const API_STATS_CACHE_KEY="gmailChecker_apiStats",API_STATS_CACHE_DURATION=36e5;function getCachedApiStats(){try{const t=localStorage.getItem(API_STATS_CACHE_KEY);if(!t)return null;const e=JSON.parse(t);return isCacheExpired(e)?(localStorage.removeItem(API_STATS_CACHE_KEY),null):e}catch(t){return console.error("Error parsing cached API stats:",t),localStorage.removeItem(API_STATS_CACHE_KEY),null}}function isCacheExpired(t){return!t||!t.cachedAt||Date.now()-t.cachedAt>API_STATS_CACHE_DURATION}function setCachedApiStats(t){try{localStorage.setItem(API_STATS_CACHE_KEY,JSON.stringify({...t,cachedAt:Date.now()}))}catch(t){console.error("Error caching API stats:",t)}}function calculateResetTimestamp(){return Date.now()+864e5}function generateApiStatsHtml(t,e=!1){if(!t)return'<p class="status-error">No data available</p>';if(t.error)return`<p class="status-error">${t.error}</p>`;const s=t.type||"free",a=t.requestsUsed||0,n=t.maxRequests||1e3,r=t.remainingRequests||Math.max(0,n-a),o=t.resetPeriod||"24 hours",i=t.nextResetUTC||new Date(t.resetTimestamp||calculateResetTimestamp()).toUTCString(),c=t.owner||"Anonymous",d=e?"modal-countdown":"countdown";return` <div class="stats-grid"> <div class="stat-item"> <p>Key Type</p> <strong>${s.toUpperCase()}</strong> </div> <div class="stat-item"> <p>Requests Used</p> <strong>${a}</strong> </div> <div class="stat-item"> <p>Daily Requests</p> <strong>${n}</strong> </div> <div class="stat-item"> <p>Remaining</p> <strong>${r}</strong> </div> <div class="stat-item"> <p>Reset Period</p> <strong>${o}</strong> </div> <div class="stat-item"> <p>Reset Countdown</p> <strong id="${d}">00:00:00</strong> </div> <div class="stat-item"> <p>Next Reset (UTC)</p> <strong>${i}</strong> </div> <div class="stat-item"> <p>Owner</p> <strong>${c}</strong> </div> </div>`}function renderApiStats(t,e=!1){let s;if(e){if(s=document.getElementById("modal-stats-container"),!s)return void console.error("Modal stats container not found")}else{if(s=document.getElementById("api-stats-container"),!apiStats)return void console.error("Parent element 'apiStats' not found for API stats container.");s||(s=document.createElement("div"),s.id="api-stats-container",apiStats.appendChild(s)),t&&t.error,apiStats.classList.remove("hidden")}if(s.innerHTML=generateApiStatsHtml(t,e),t&&t.resetTimestamp&&!t.error){const s=e?"modal-countdown":"countdown";startCountdown(t.resetTimestamp,s)}else{const t=e?"modal-countdown":"countdown",s=document.getElementById(t);s&&(s.textContent="N/A")}systemMessage&&!e&&setTimeout((()=>{systemMessage.textContent=t&&!t.error?"API KEY STATISTICS":"API STATS ERROR"}),3e3)}async function getApiStatsData(){let t=getCachedApiStats();if(t)return t;if(!APIKEY)try{const t=await handleGenerateKey();APIKEY=t.APIKEY}catch(e){return console.error("Error generating API key:",e),t?(console.warn("Using expired cache as fallback due to API key error"),t):{error:`Failed to get API key: ${e.message}`,resetTimestamp:calculateResetTimestamp()}}try{const t=await fetch(`${SERVER_URL}/stats?key=${APIKEY}`);if(!t.ok){const e=await t.text();throw new Error(`HTTP ${t.status}: ${e}`)}const e=await t.json(),s={type:e.type||"free",requestsUsed:parseInt(e.requestsUsed)||0,maxRequests:parseInt(e.maxRequests)||1e3,remainingRequests:parseInt(e.remainingRequests)||1e3,resetPeriod:e.resetPeriod||"24 hours",nextResetUTC:e.nextResetUTC||"Unknown",owner:e.owner||"Anonymous",resetTimestamp:e.resetTimestamp||calculateResetTimestamp(),cachedAt:Date.now()};return setCachedApiStats(s),s}catch(e){if(console.error("Error fetching API stats:",e),t)return console.warn("Using expired cache due to fetch error"),t;const s={type:"free",requestsUsed:0,maxRequests:1e3,remainingRequests:1e3,resetPeriod:"24 hours",nextResetUTC:new Date(calculateResetTimestamp()).toUTCString(),owner:"Anonymous",resetTimestamp:calculateResetTimestamp(),cachedAt:Date.now(),error:`Using fallback data: ${e.message}`};return setCachedApiStats(s),s}}async function initializeApiStats(){const t=await getApiStatsData();return renderApiStats(t,!1),t}async function updateApiStatsAfterExecution(t){try{let e=await getCachedApiStats();if(!e){console.warn("No cached stats to update after execution. Fetching new data.");return void renderApiStats(await getApiStatsData(),!1)}e.requestsUsed=(e.requestsUsed||0)+t,e.remainingRequests=Math.max(0,(e.remainingRequests||0)-t),e.lastUpdated=Date.now(),setCachedApiStats(e),renderApiStats(e,!1)}catch(t){console.error("Error updating API stats after execution:",t)}}function startCountdown(t,e="countdown"){(!(t=parseInt(t))||isNaN(t)||t<=Date.now())&&(console.warn("Invalid resetTimestamp, generating new one"),t=calculateResetTimestamp());let s=document.getElementById(e);if(!s)return console.warn(`Countdown element '${e}' not found, retrying...`),void setTimeout((()=>startCountdown(t,e)),100);function a(){const e=Date.now(),a=t-e;if(a<=0)return s.textContent="RESET!",clearInterval(n),void setTimeout((()=>{getApiStatsData(!0).then((t=>{if("function"==typeof renderApiStats){renderApiStats(t,!1);document.getElementById("modal-stats-container")&&renderApiStats(t,!0)}}))}),2e3);const r=Math.floor(a/36e5),o=Math.floor(a%36e5/6e4),i=Math.floor(a%6e4/1e3);s.textContent=`${r.toString().padStart(2,"0")}:${o.toString().padStart(2,"0")}:${i.toString().padStart(2,"0")}`}s.dataset.intervalId&&clearInterval(parseInt(s.dataset.intervalId)),a();const n=setInterval(a,1e3);s.dataset.intervalId=n.toString(),s.dataset.countdownFor=e}function ensureModalCountdownReady(t,e=10){return new Promise((s=>{let a=0;!function n(){a++,document.getElementById("modal-countdown")?(startCountdown(t,"modal-countdown"),s(!0)):a<e?setTimeout(n,200):(console.error("Modal countdown element not found after max attempts"),s(!1))}()}))}async function forceRefreshStats(){return localStorage.removeItem(API_STATS_CACHE_KEY),await initializeApiStats()}function closeStats(){apiStats.classList.add("hidden"),closStatsAbsolute.classList.add("hidden"),systemInfoContainer.classList.add("hidden")}