const API_STATS_CACHE_KEY="gmailChecker_apiStats",API_STATS_CACHE_DURATION=36e5;function getCachedApiStats(){try{const t=localStorage.getItem(API_STATS_CACHE_KEY);return t?JSON.parse(t):null}catch(t){return console.error("Error parsing cached API stats:",t),null}}function setCachedApiStats(t){localStorage.setItem(API_STATS_CACHE_KEY,JSON.stringify(t))}function isCacheExpired(t){return!t||!t.cachedAt||Date.now()-t.cachedAt>API_STATS_CACHE_DURATION}function calculateResetTimestamp(){return Date.now()+864e5}function generateApiStatsHtml(t){if(!t||t.error)return`<p class="status-error">${t?.error||"Failed to load API statistics."}</p>`;return` <div class="stats-grid"> <div class="stat-item"> <p>Key Type</p> <strong>${t.type||"N/A"}</strong> </div> <div class="stat-item"> <p>Requests Used</p> <strong>${t.requestsUsed||0}</strong> </div> <div class="stat-item"> <p>Daily Requests</p> <strong>${t.maxRequests||0}</strong> </div> <div class="stat-item"> <p>Remaining Requests</p> <strong>${t.remainingRequests||0}</strong> </div> <div class="stat-item"> <p>Reset Period</p> <strong>${t.resetPeriod||"N/A"}</strong> </div> <div class="stat-item"> <p>Reset Countdown</p> <strong id="countdown">Calculating...</strong> </div> <div class="stat-item"> <p>Next Reset (UTC)</p> <strong>${t.nextResetUTC||"Tomorrow"}</strong> </div> <div class="stat-item"> <p>Owner</p> <strong>${t.owner||"N/A"}</strong> </div> </div> `}function renderApiStats(t){let e=document.getElementById("api-stats-container");if(apiStats){if(e||(e=document.createElement("div"),e.id="api-stats-container",apiStats.appendChild(e)),t&&t.error,apiStats.classList.remove("hidden"),e.innerHTML=generateApiStatsHtml(t),t&&t.resetTimestamp&&!t.error)startCountdown(t.resetTimestamp);else{const t=document.getElementById("countdown");t&&(t.textContent="N/A")}systemMessage&&setTimeout((()=>{systemMessage.textContent=t&&!t.error?"API KEY STATISTICS":"API STATS ERROR"}),3e3)}else console.error("Parent element 'apiStats' not found for API stats container.")}async function getApiStatsData(){let t=getCachedApiStats();if(t&&!isCacheExpired(t))return t;if(!APIKEY)try{const t=await handleGenerateKey();APIKEY=t.APIKEY}catch(t){return console.error("Error generating API key:",t),{error:`Failed to get API key: ${t.message}`}}try{const t=await fetch(`${SERVER_URL}/stats?key=${APIKEY}`);if(!t.ok){const e=await t.json();throw new Error(e.error||`Failed to fetch stats (status ${t.status})`)}const e=await t.json(),s={...e,cachedAt:Date.now(),resetTimestamp:e.resetTimestamp||calculateResetTimestamp()};return setCachedApiStats(s),s}catch(e){return console.error("Error fetching API stats:",e),t?(console.warn("Using expired cache due to fetch error."),t):{error:e.message}}}async function initializeApiStats(){const t=await getApiStatsData();return renderApiStats(t),t}async function updateApiStatsAfterExecution(t){let e=await getCachedApiStats();if(e)e.requestsUsed=(e.requestsUsed||0)+t,e.remainingRequests=Math.max(0,(e.remainingRequests||0)-t),e.lastUpdated=Date.now(),setCachedApiStats(e),renderApiStats(e);else{console.warn("No cached stats to update after execution. Fetching new data.");renderApiStats(await getApiStatsData())}}function startCountdown(t){const e=document.getElementById("countdown");if(!e)return void console.warn("Countdown element not found.");let s=e.dataset.intervalId;s&&clearInterval(parseInt(s));const a=t;function n(){const t=Date.now(),s=a-t;if(s<=0)return e.textContent="RESET!",clearInterval(r),void localStorage.removeItem(API_STATS_CACHE_KEY);const n=Math.floor(s/36e5),o=Math.floor(s%36e5/6e4),i=Math.floor(s%6e4/1e3);e.textContent=`${n.toString().padStart(2,"0")}:${o.toString().padStart(2,"0")}:${i.toString().padStart(2,"0")}`}n();const r=setInterval(n,1e3);e.dataset.intervalId=r.toString()}async function forceRefreshStats(){return localStorage.removeItem(API_STATS_CACHE_KEY),await initializeApiStats()}