const server1=`${SERVER_URL}/check1`,server2=`${SERVER_URL}/check2`,fastServer1=`${SERVER_URL}/fastcheck1`,fastServer2=`${SERVER_URL}/fastcheck2`;let selectedServer,abortController=null,chunks=[],currentProgress=0;async function EXECUTE(){if(setExecutionUi(),invalidEmails.length>0)return void unsetExecutionUi();emailInput.value=validEmails.join("\n");const e=emailInput.value.split("\n").map((e=>e.trim())).filter((e=>e.length>0));if(0===e.length)return unsetExecutionUi(),void(systemMessage.textContent="EXECUTION CANCELLED! NO EMAIL TO PROCESS.");if(!APIKEY){systemMessage.innerHTML="<p>GENERATING API KEY</p><p>PLEASE WAIT...</p>",executeBtn.innerHTML='<div class="loading-spinner"></div>';try{const e=await handleGenerateKey();APIKEY=e.APIKEY}catch(e){throw unsetExecutionUi(),systemMessage.textContent="ERROR: FAILED TO GENERATE API KEY. PLEASE TRY AGAIN.",console.error("Failed to get API Key:",e),new Error("Failed to initialize API key for execution.")}executeBtn.innerHTML="",executeBtn.innerHTML='<i class="fas fa-play"></i> EXECUTE'}let t,s;selectedServer=document.querySelector('input[name="server"]:checked').value,"server1"===selectedServer||"server2"===selectedServer?(verifyFilterBtn.classList.remove("hidden"),unregisteredFilterBtn.classList.remove("hidden"),disabledFilterBtn.classList.remove("hidden"),t=100,s="server1"===selectedServer?server1:server2):(verifyFilterBtn.classList.add("hidden"),unregisteredFilterBtn.classList.add("hidden"),disabledFilterBtn.classList.add("hidden"),t=1e4,s="fastServer1"===selectedServer?fastServer1:fastServer2),chunks=[];for(let s=0;s<e.length;s+=t)chunks.push(e.slice(s,s+t));results=[],abortController=new AbortController,currentProgress=0,updateProgressBar(0),systemMessage.textContent="EXECUTING...";try{if(await processChunksSingleServer(chunks,s),abortController.signal.aborted)throw new Error("Aborted by user.");await animateProgressBar(currentProgress,100),progressOverlay.classList.add("hidden"),stopButttonContainer.classList.add("hidden"),outputButtonContainer.classList.remove("hidden"),apiStats.classList.remove("hidden"),closStatsAbsolute.classList.remove("hidden"),systemMessage.textContent="EXECUTION COMPLETED!","function"==typeof saveCurrentResults?await saveCurrentResults():(console.warn("saveCurrentResults not available, skipping history save"),setTimeout((()=>{"function"==typeof initHistorySystem&&initHistorySystem().then((()=>{"function"==typeof saveCurrentResults&&saveCurrentResults()}))}),500)),"function"==typeof updateApiStatsAfterExecution?await updateApiStatsAfterExecution(results.length):console.warn("updateApiStatsAfterExecution not available, skipping stats update"),updateCounters(),resultListContainer.scrollTop=0,displayResults()}catch(e){"EXECUTION CANCELLED"===e.name||"Aborted by user."===e.message||(console.error("Execution error:",e),unsetExecutionUi(),systemMessage.textContent=`${e.message}`)}}async function processChunksSingleServer(e,t){if(abortController.signal.aborted)return;for(let s=0;s<e.length;s++){if(abortController.signal.aborted)throw new Error("EXECUTION CANCELLED");const r=e[s],n=(s+1)/e.length*100;try{const e=await fetchWithTimeout(t,{method:"POST",headers:{Authorization:`Bearer ${APIKEY}`,"Content-Type":"application/json"},body:JSON.stringify({mail:r})},18e4,abortController.signal);if(abortController.signal.aborted)throw new Error("EXECUTION CANCELLED");if(!e.ok)throw new Error(`Server returned ${e.status}: ${e.statusText}`);if(processApiResponse(await e.json()),abortController.signal.aborted)throw new Error("EXECUTION CANCELLED");if(updateCounters(),displayResults(),await animateProgressBar(currentProgress,n),abortController.signal.aborted)throw new Error("EXECUTION CANCELLED");systemMessage.textContent=`PROCESSING... ${currentProgress.toFixed(0)}%`}catch(e){if("EXECUTION CANCELLED"===e.name)throw e;console.error(`Error with ${t}:`,e.message)}if(s<e.length-1&&(await new Promise((e=>setTimeout(e,10))),abortController.signal.aborted))throw new Error("EXECUTION CANCELLED")}}function fetchWithTimeout(e,t,s,r){return new Promise(((n,a)=>{const i=new AbortController,o=setTimeout((()=>{i.abort(),a(new Error("Request timeout (3 minutes)"))}),s);r&&r.addEventListener("abort",(()=>{clearTimeout(o),i.abort(),a(new Error("EXECUTION CANCELLED"))}),{once:!0}),t.signal=i.signal,fetch(e,t).then((e=>{clearTimeout(o),n(e)})).catch((e=>{clearTimeout(o),a(e)}))}))}function processApiResponse(e){if(abortController&&abortController.signal.aborted)return;if(!Array.isArray(e))return void console.error("Invalid API response:",e);const t="server1"===selectedServer||"server2"===selectedServer;e.forEach((e=>{let s=e.status.toLowerCase();if(t){s={bad:"bad",error:"bad",disabled:"disabled",live:"live",verify:"verify",unregistered:"unregistered"}[s]||"error"}else s="live"===s?"live":"bad";results.push({email:e.email,status:s,details:e.details||"Validated"})}))}function cancelExecution(){abortController&&(abortController.abort(),unsetExecutionUi(),systemMessage.textContent="EXECUTION CANCELLED")}function updateProgressBar(e){const t=Math.min(100,Math.max(0,e));donutChart.style.background=`conic-gradient(#cc0000 ${t}%, #333 ${t}% 100%)`,progressText.textContent=`${t.toFixed(0)}%`}async function animateProgressBar(e,t){const s=10*Math.abs(t-e),r=performance.now();return new Promise((n=>{requestAnimationFrame((function a(i){const o=i-r,l=Math.min(1,o/s),d=e+(t-e)*l;updateProgressBar(d),currentProgress=d,l<1&&!abortController.signal.aborted?requestAnimationFrame(a):(updateProgressBar(t),currentProgress=t,n())}))}))}function resetSystem(){createLoadingAnimation(duration="fast"),results=[],currentFilter="all",filterBtns.forEach((e=>{e.classList.remove("active"),"all"===e.dataset.filter&&e.classList.add("active")})),resultList.innerHTML="",resultList.style.height="auto",resultListContainer.scrollTop=0,updateCounters(),updateProgressBar(0),inputSection.classList.remove("hidden"),emailInput.scrollTop=emailInput.scrollHeight,serverSelectionContainer.classList.remove("hidden"),inputButtonContainer.classList.remove("hidden"),myAccountButton.classList.remove("hidden"),systemInfoContainer.classList.remove("hidden"),closStatsAbsolute.classList.add("hidden"),executeBtn.disabled=!1,clearInputBtn.disabled=!1,pasteBtn.disabled=!1,uploadBtn.disabled=!1,executeBtn.innerHTML="",executeBtn.innerHTML='<i class="fas fa-play"></i> EXECUTE',validateInput(),systemMessage.style.cssText="",systemMessage.textContent="SYSTEM HAS BEEN RESET.",outputSection.classList.add("hidden"),outputButtonContainer.classList.add("hidden"),progressOverlay.classList.add("hidden"),apiStats.classList.add("hidden"),blockUpdateMessages(!1),updateExecutionStatus(!1)}function backToMain(){results=[],currentFilter="all",filterBtns.forEach((e=>{e.classList.remove("active"),"all"===e.dataset.filter&&e.classList.add("active")})),resultList.innerHTML="",resultList.style.height="auto",resultListContainer.scrollTop=0,updateCounters(),inputSection.classList.remove("hidden"),emailInput.scrollTop=emailInput.scrollHeight,serverSelectionContainer.classList.remove("hidden"),inputButtonContainer.classList.remove("hidden"),clearInputBtn.classList.remove("hidden"),clearErrorsBtn.classList.add("hidden"),resetBtn.classList.remove("hidden"),backMyAccountBtn.classList.add("hidden"),validateInput(),systemMessage.style.cssText="",systemMessage.textContent="AWAITING COMMAND...",resultTitle.textContent="RESULTS",document.querySelector("main").style.background="",backgroundGlow.style.cssText="",outputSection.classList.add("hidden"),outputButtonContainer.classList.add("hidden"),progressOverlay.classList.add("hidden"),apiStats.classList.add("hidden"),blockUpdateMessages(!1),updateExecutionStatus(!1)}function setExecutionUi(){progressOverlay.classList.remove("hidden"),stopButttonContainer.classList.remove("hidden"),executeBtn.disabled=!0,clearInputBtn.disabled=!0,pasteBtn.disabled=!0,uploadBtn.disabled=!0,systemMessage.style.innerHTML="",systemMessage.style.cssText="",backMyAccountBtn.classList.add("hidden"),executeBtn.disabled=!0,serverSelectionContainer.classList.add("hidden"),myAccountButton.classList.add("hidden"),errorInfo.classList.add("hidden"),inputButtonContainer.classList.add("hidden"),inputSection.classList.add("hidden"),systemInfoContainer.classList.remove("hidden"),outputSection.classList.remove("hidden"),resetBtn.classList.remove("hidden"),blockUpdateMessages(!0),updateExecutionStatus(!0)}function unsetExecutionUi(){createLoadingAnimation(duration="fast"),results=[],currentFilter="all",filterBtns.forEach((e=>{e.classList.remove("active"),"all"===e.dataset.filter&&e.classList.add("active")})),resultList.innerHTML="",resultList.style.height="auto",resultListContainer.scrollTop=0,updateCounters(),updateProgressBar(0),progressOverlay.classList.add("hidden"),inputSection.classList.remove("hidden"),inputButtonContainer.classList.remove("hidden"),serverSelectionContainer.classList.remove("hidden"),systemInfoContainer.classList.remove("hidden"),executeBtn.disabled=!1,clearInputBtn.classList.remove("hidden"),clearErrorsBtn.classList.add("hidden"),myAccountButton.classList.remove("hidden"),systemMessage.style.innerHTML="",systemMessage.style.cssText="",executeBtn.disabled=!1,clearInputBtn.disabled=!1,pasteBtn.disabled=!1,uploadBtn.disabled=!1,validateInput(),resetBtn.classList.add("hidden"),stopButttonContainer.classList.add("hidden"),outputSection.classList.add("hidden"),systemInfoContainer.classList.remove("hidden"),closStatsAbsolute.classList.add("hidden"),blockUpdateMessages(!1),updateExecutionStatus(!1)}