const server1=`${SERVER_URL}/check1`,server2=`${SERVER_URL}/check2`,fastServer1=`${SERVER_URL}/fastcheck1`,fastServer2=`${SERVER_URL}/fastcheck2`;let selectedServer,abortController=null,chunks=[],currentProgress=0;async function EXECUTE(){if(blockUpdateMessages(!0),!APIKEY){systemMessage.innerHTML="<p>GENERATING API KEY</p><p>PLEASE WAIT...</p>",executeBtn.disabled=!0,clearInputBtn.disabled=!0,pasteBtn.disabled=!0,uploadBtn.disabled=!0,executeBtn.innerHTML='<div class="loading-spinner"></div>';try{const e=await handleGenerateKey();APIKEY=e.APIKEY}catch(e){throw resetSystem(),systemMessage.textContent="ERROR: FAILED TO GENERATE API KEY. PLEASE TRY AGAIN.",console.error("Failed to get API Key:",e),new Error("Failed to initialize API key for execution.")}executeBtn.disabled=!1,clearInputBtn.disabled=!1,pasteBtn.disabled=!1,uploadBtn.disabled=!1,executeBtn.innerHTML="",executeBtn.innerHTML='<i class="fas fa-play"></i> EXECUTE'}if(await validateInput(),invalidEmails.length>0)return;emailInput.value=validEmails.join("\n");const e=emailInput.value.split("\n").map((e=>e.trim())).filter((e=>e.length>0));if(0===e.length)return;progressOverlay.classList.remove("hidden"),executeBtn.disabled=!0,inputButtonContainer.classList.add("hidden"),serverSelectionContainer.classList.add("hidden"),inputSection.classList.add("hidden"),outputSection.classList.remove("hidden"),errorInfo.classList.add("hidden");let t,r,s=setTimeout((()=>{stopButttonContainer.classList.remove("hidden")}),2e4);selectedServer=document.querySelector('input[name="server"]:checked').value,"server1"===selectedServer||"server2"===selectedServer?(t=100,verifyFilterBtn.classList.remove("hidden"),unregisteredFilterBtn.classList.remove("hidden"),disabledFilterBtn.classList.remove("hidden"),r="server1"===selectedServer?server1:server2):(t=1e4,verifyFilterBtn.classList.add("hidden"),unregisteredFilterBtn.classList.add("hidden"),disabledFilterBtn.classList.add("hidden"),r="fastServer1"===selectedServer?fastServer1:fastServer2),chunks=[];for(let r=0;r<e.length;r+=t)chunks.push(e.slice(r,r+t));results=[],abortController=new AbortController,currentProgress=0,updateProgressBar(0),systemMessage.textContent="EXECUTING...";try{if(await processChunksSingleServer(chunks,r),abortController.signal.aborted)throw clearTimeout(s),new Error("Aborted by user.");clearTimeout(s),await animateProgressBar(currentProgress,100),progressOverlay.classList.add("hidden"),stopButttonContainer.classList.add("hidden"),outputButtonContainer.classList.remove("hidden"),apiStats.classList.remove("hidden"),systemMessage.textContent="EXECUTION COMPLETED!",await saveCurrentResults(),await updateApiStatsAfterExecution(results.length),updateCounters(),resultListContainer.scrollTop=0,displayResults()}catch(e){clearTimeout(s),"EXECUTION CANCELLED"===e.name||"Aborted by user."===e.message||(console.error("Execution error:",e),resetSystem(),systemMessage.textContent=`${e.message}`)}finally{blockUpdateMessages(!1)}}async function processChunksSingleServer(e,t){if(abortController.signal.aborted)return;if(!APIKEY)try{const e=await handleGenerateKey();APIKEY=e.APIKEY}catch(e){if("EXECUTION CANCELLED"===e.name)throw e;throw console.error("Failed to get API Key:",e),new Error("Failed to initialize API key for execution.")}for(let r=0;r<e.length;r++){if(abortController.signal.aborted)throw new Error("EXECUTION CANCELLED");const s=e[r],n=(r+1)/e.length*100;try{const e=await fetchWithTimeout(t,{method:"POST",headers:{Authorization:`Bearer ${APIKEY}`,"Content-Type":"application/json"},body:JSON.stringify({mail:s})},18e4,abortController.signal);if(abortController.signal.aborted)throw new Error("EXECUTION CANCELLED");if(!e.ok)throw new Error(`Server returned ${e.status}: ${e.statusText}`);if(processApiResponse(await e.json()),abortController.signal.aborted)throw new Error("EXECUTION CANCELLED");if(updateCounters(),displayResults(),await animateProgressBar(currentProgress,n),abortController.signal.aborted)throw new Error("EXECUTION CANCELLED");systemMessage.textContent=`PROCESSING... ${currentProgress.toFixed(0)}%`}catch(e){if("EXECUTION CANCELLED"===e.name)throw e;console.error(`Error with ${t}:`,e.message);const r=t.includes("fastcheck")?"FAST SERVER":"SERVER",s=t.slice(-1);throw new Error(`FAILED TO CONNECT TO ${r} ${s}`)}if(r<e.length-1&&(await new Promise((e=>setTimeout(e,10))),abortController.signal.aborted))throw new Error("EXECUTION CANCELLED")}}function fetchWithTimeout(e,t,r,s){return new Promise(((n,a)=>{const o=new AbortController,i=setTimeout((()=>{o.abort(),a(new Error("Request timeout (3 minutes)"))}),r);s&&s.addEventListener("abort",(()=>{clearTimeout(i),o.abort(),a(new Error("EXECUTION CANCELLED"))}),{once:!0}),t.signal=o.signal,fetch(e,t).then((e=>{clearTimeout(i),n(e)})).catch((e=>{clearTimeout(i),a(e)}))}))}function processApiResponse(e){if(abortController&&abortController.signal.aborted)return;if(!Array.isArray(e))return void console.error("Invalid API response:",e);const t="server1"===selectedServer||"server2"===selectedServer;e.forEach((e=>{let r=e.status.toLowerCase();if(t){r={bad:"bad",error:"bad",disabled:"disabled",live:"live",verify:"verify",unregistered:"unregistered"}[r]||"error"}else r="live"===r?"live":"bad";results.push({email:e.email,status:r,details:e.details||"Validated"})}))}function cancelExecution(){abortController&&(abortController.abort(),resetSystem(),systemMessage.textContent="EXECUTION CANCELLED")}function updateProgressBar(e){const t=Math.min(100,Math.max(0,e));donutChart.style.background=`conic-gradient(#cc0000 ${t}%, #333 ${t}% 100%)`,progressText.textContent=`${t.toFixed(0)}%`}async function animateProgressBar(e,t){const r=10*Math.abs(t-e),s=performance.now();return new Promise((n=>{requestAnimationFrame((function a(o){const i=o-s,l=Math.min(1,i/r),d=e+(t-e)*l;updateProgressBar(d),currentProgress=d,l<1&&!abortController.signal.aborted?requestAnimationFrame(a):(updateProgressBar(t),currentProgress=t,n())}))}))}function resetSystem(){createLoadingAnimation(duration="fast"),stopButttonContainer.classList.add("hidden"),executeBtn.disabled=!1,inputSection.classList.remove("hidden"),serverSelectionContainer.classList.remove("hidden"),inputButtonContainer.classList.remove("hidden"),outputSection.classList.add("hidden"),outputButtonContainer.classList.add("hidden"),progressOverlay.classList.add("hidden"),apiStats.classList.add("hidden"),results=[],currentFilter="all",filterBtns.forEach((e=>{e.classList.remove("active"),"all"===e.dataset.filter&&e.classList.add("active")})),resultList.innerHTML="",resultList.style.height="auto",resultListContainer.scrollTop=0,updateProgressBar(0),validateInput(),updateInputLineNumbers(),blockUpdateMessages(!1),systemMessage.textContent="SYSTEM HAS BEEN RESET."}