const DB_NAME="GmailCheckerHistory",DB_VERSION=1,STORE_NAME="checkHistory";let db=null;async function initDB(){return new Promise(((t,e)=>{const o=indexedDB.open(DB_NAME,DB_VERSION);o.onerror=()=>e(o.error),o.onsuccess=()=>{db=o.result,t(db)},o.onupgradeneeded=t=>{const e=t.target.result;if(!e.objectStoreNames.contains(STORE_NAME)){const t=e.createObjectStore(STORE_NAME,{keyPath:"id",autoIncrement:!0});t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("filename","filename",{unique:!1})}}}))}function generateFilename(t){const e=new Date;return`History-${t}emails-BulkGmailChecker_${e.toISOString().slice(0,10).replace(/-/g,"-")}_${e.toTimeString().slice(0,8).replace(/:/g,"-")}`}async function saveCheckHistory(t){db||await initDB();try{const e=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME),o={timestamp:Date.now(),filename:generateFilename(t.length),emailCount:t.length,results:t,stats:{live:t.filter((t=>"live"===t.status)).length,verify:t.filter((t=>"verify"===t.status)).length,disabled:t.filter((t=>"disabled"===t.status)).length,unregistered:t.filter((t=>"unregistered"===t.status)).length,error:t.filter((t=>"error"===t.status)).length}},r=e.add(o);return new Promise(((t,e)=>{r.onsuccess=()=>t(r.result),r.onerror=()=>e(r.error)}))}catch(t){throw console.error("Error saving history:",t),t}}async function getAllHistory(){return db||await initDB(),new Promise(((t,e)=>{const o=db.transaction([STORE_NAME],"readonly").objectStore(STORE_NAME).index("timestamp").openCursor(null,"prev"),r=[];o.onsuccess=e=>{const o=e.target.result;o?(r.push(o.value),o.continue()):t(r)},o.onerror=()=>e(o.error)}))}async function getHistoryItem(t){return db||await initDB(),new Promise(((e,o)=>{const r=db.transaction([STORE_NAME],"readonly").objectStore(STORE_NAME).get(t);r.onsuccess=()=>e(r.result),r.onerror=()=>o(r.error)}))}async function deleteHistoryItem(t){return db||await initDB(),new Promise(((e,o)=>{const r=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME).delete(t);r.onsuccess=()=>e(),r.onerror=()=>o(r.error)}))}async function clearAllHistory(){return db||await initDB(),new Promise(((t,e)=>{const o=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME).clear();o.onsuccess=()=>t(),o.onerror=()=>e(o.error)}))}function formatDate(t){return new Date(t).toLocaleString()}async function loadHistory(){try{await new Promise((t=>setTimeout(t,50)));const t=document.getElementById("history-list"),e=document.getElementById("total-checks"),o=document.getElementById("total-emails");if(!t||!e||!o)return console.error("History elements not found in DOM"),myAccountModal?void 0:(await createMyAccountModal(),await loadHistory());t.innerHTML="<p>Loading history...</p>";const r=await getAllHistory();e.textContent=`Total: ${r.length}`;const i=r.reduce(((t,e)=>t+e.emailCount),0);if(o.textContent=`Emails: ${i}`,0===r.length)return void(t.innerHTML=' <div class="empty-history"> <i class="fas fa-history fa-2x" style="margin-bottom: 10px;"></i> <p>No check history found</p> <p style="font-size: 0.9em;">Your check results will appear here</p> </div> ');let n="";r.forEach((t=>{n+=` <div class="history-item" data-id="${t.id}"> <div class="history-info"> <div class="history-filename">${t.filename}</div> <div class="history-meta"> <span>${formatDate(t.timestamp)}</span> <span>${t.emailCount} emails</span> <span>Live: ${t.stats.live}</span> <span>Verify: ${t.stats.verify}</span> <span>Disabled: ${t.stats.disabled}</span> </div> </div> <div class="history-actions"> <button class="history-btn open" title="Open in results"> <i class="fas fa-folder-open"></i> </button> <button class="history-btn copy" title="Copy results"> <i class="fas fa-copy"></i> </button> <button class="history-btn download" title="Download results"> <i class="fas fa-download"></i> </button> <button class="history-btn delete" title="Delete history"> <i class="fas fa-trash"></i> </button> </div> </div> `})),t.innerHTML=n,document.querySelectorAll(".history-item").forEach((t=>{const e=parseInt(t.dataset.id);t.querySelector(".history-btn.open").addEventListener("click",(()=>openHistoryItem(e))),t.querySelector(".history-btn.copy").addEventListener("click",(()=>copyHistoryItem(e))),t.querySelector(".history-btn.download").addEventListener("click",(()=>downloadHistoryItem(e))),t.querySelector(".history-btn.delete").addEventListener("click",(()=>deleteHistoryItemUI(e)))}))}catch(t){console.error("Error loading history:",t);const e=document.getElementById("history-list");e&&(e.innerHTML='<p class="status-error">Error loading history</p>')}}async function openHistoryItem(t){try{const e=await getHistoryItem(t);if(!e)return void alert("History item not found");results=e.results,updateCounters(),displayResults(),inputSection.classList.add("hidden"),outputSection.classList.remove("hidden"),inputButtonContainer.classList.add("hidden"),outputButtonContainer.classList.remove("hidden"),closeMyAccountModal(),systemMessage.textContent=`${e.filename}`}catch(t){console.error("Error opening history item:",t),alert("Failed to open history item")}}async function copyHistoryItem(t){try{const e=await getHistoryItem(t);if(!e)return void alert("History item not found");const o=e.results.map((t=>t.email)).join("\n");await navigator.clipboard.writeText(o);const r=event.target.closest(".history-btn.copy"),i=r.innerHTML;r.innerHTML='<i class="fas fa-check"></i>',r.style.backgroundColor="rgba(0, 255, 127, 0.4)",setTimeout((()=>{r.innerHTML=i,r.style.backgroundColor=""}),2e3)}catch(t){console.error("Error copying history item:",t),alert("Failed to copy history item")}}async function downloadHistoryItem(t){try{const e=await getHistoryItem(t);if(!e)return void alert("History item not found");const o=e.results.map((t=>t.email)).join("\n"),r=new Blob([o],{type:"text/plain"}),i=URL.createObjectURL(r),n=document.createElement("a");n.href=i,n.download=`${e.filename}.txt`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(i)}catch(t){console.error("Error downloading history item:",t),alert("Failed to download history item")}}async function deleteHistoryItemUI(t){if(confirm("Are you sure you want to delete this history item?"))try{await deleteHistoryItem(t);const e=document.querySelector(`.history-item[data-id="${t}"]`);e&&(e.style.opacity="0.5",setTimeout((()=>{e.remove(),loadHistory()}),300))}catch(t){console.error("Error deleting history item:",t),alert("Failed to delete history item")}}async function clearAllHistoryUI(){if(confirm("Are you sure you want to clear all history? This action cannot be undone."))try{await clearAllHistory(),await loadHistory()}catch(t){console.error("Error clearing history:",t),alert("Failed to clear history")}}async function initHistorySystem(){try{await initDB()}catch(t){console.error("Failed to initialize history system:",t)}}async function saveCurrentResults(){if(results&&results.length>0)try{await saveCheckHistory(results)}catch(t){console.error("Failed to save results to history:",t)}}