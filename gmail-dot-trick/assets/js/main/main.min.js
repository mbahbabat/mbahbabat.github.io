const errorEmailOverlay=document.getElementById("error-email-overlay"),errorEmailList=document.getElementById("error-email-list"),removeDuplicatesBtn=document.getElementById("remove-duplicates"),landingPage=document.getElementById("output-info-scrollable"),removeInvalidBtn=document.getElementById("remove-invalid"),appInfo=document.getElementById("app-info"),emailsInput=document.getElementById("emails-input"),actionBtn=document.getElementById("action-btn"),generateBtn=document.getElementById("generate-btn"),modeBtn=document.getElementById("mode-btn"),modeStatus=document.getElementById("mode-status"),resetBtn=document.getElementById("reset-btn"),modeSelection=document.getElementById("mode-selection"),selectModeH2=document.getElementById("select-mode-h2"),modeSpecs=document.getElementById("mode-specs"),downloadAllBtn=document.getElementById("download-all"),emailTasksContainer=document.getElementById("email-tasks"),globalProgress=document.getElementById("global-progress"),lineNumbers=document.getElementById("line-numbers"),DB_NAME="GmailDotTrickDB",DB_VERSION=1,STORE_NAME="emailResults",SERVER_URL="https://bulk-gmail-dot-trick.mbahbabat.workers.dev",CACHE_DURATION=864e5,cacheUtils={set:(e,t)=>{try{const a={data:t,timestamp:Date.now()};return localStorage.setItem(e,JSON.stringify(a)),!0}catch(e){return console.warn("LocalStorage set failed:",e),!1}},get:e=>{try{const t=localStorage.getItem(e);if(!t)return null;const a=JSON.parse(t);return Date.now()-a.timestamp>864e5?(localStorage.removeItem(e),null):a.data}catch(e){return console.warn("LocalStorage get failed:",e),null}},remove:e=>{try{return localStorage.removeItem(e),!0}catch(e){return console.warn("LocalStorage remove failed:",e),!1}}};let MAX_CONCURRENT_TASKS,appConfig,accessToken,emailTasks=new Map,activeWorkers=new Map,isProcessing=!1,completedTasks=0,totalTasks=0,emailQueue=[],currentEmailQueueIndex=0,currentProcessingBatch=new Set,isBatchCurrentlyActive=!1,cachedWorkerCode=null,db=null;function openDatabase(){return new Promise(((e,t)=>{const a=indexedDB.open(DB_NAME,DB_VERSION);a.onerror=()=>t(a.error),a.onsuccess=()=>e(a.result),a.onupgradeneeded=e=>{const t=e.target.result;t.objectStoreNames.contains(STORE_NAME)&&t.deleteObjectStore(STORE_NAME),t.createObjectStore(STORE_NAME,{keyPath:"email"}).createIndex("expiry","expiry",{unique:!1})}}))}async function saveToIndexedDB(e,t){return db||(db=await openDatabase()),new Promise(((a,n)=>{const s=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME),o=Date.now()+72e5,i={email:e,combinations:t.combinations,compressedData:t.compressedData,expiry:o,timestamp:Date.now()},r=s.put(i);r.onerror=()=>n(r.error),r.onsuccess=()=>a()}))}async function getFromIndexedDB(e){return db||(db=await openDatabase()),new Promise(((t,a)=>{const n=db.transaction([STORE_NAME],"readonly").objectStore(STORE_NAME).get(e);n.onerror=()=>a(n.error),n.onsuccess=()=>{const a=n.result;a&&a.expiry>Date.now()?t(a):(a&&deleteFromIndexedDB(e),t(null))}}))}async function deleteFromIndexedDB(e){return db||(db=await openDatabase()),new Promise(((t,a)=>{const n=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME).delete(e);n.onerror=()=>a(n.error),n.onsuccess=()=>t()}))}async function getAllFromIndexedDB(){return db||(db=await openDatabase()),new Promise(((e,t)=>{const a=db.transaction([STORE_NAME],"readonly").objectStore(STORE_NAME).getAll();a.onerror=()=>t(a.error),a.onsuccess=()=>{const t=Date.now(),n=a.result.filter((e=>e.expiry>t));a.result.filter((e=>e.expiry<=t)).forEach((e=>{deleteFromIndexedDB(e.email)})),e(n)}}))}async function clearAllIndexedDB(){return db||(db=await openDatabase()),new Promise(((e,t)=>{const a=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME).clear();a.onerror=()=>t(a.error),a.onsuccess=()=>e()}))}async function cleanupExpiredData(){return db||(db=await openDatabase()),new Promise(((e,t)=>{const a=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME).index("expiry"),n=IDBKeyRange.upperBound(Date.now()),s=a.openCursor(n);s.onerror=()=>t(s.error),s.onsuccess=t=>{const a=t.target.result;a?(a.delete(),a.continue()):e()}}))}function updateModeSpecs(){let e="";switch(getMode()){case"fast":e='<h3 style="color:#ff3300">Fast Mode Details</h3><p><strong style="color:#0ff;">Features:</strong></p><p><strong><i class="fa-solid fa-list-check"></i> Active Tasks:</strong> 10</p><p><strong><i class="fa-solid fa-wand-magic-sparkles"></i> Max Variations:</strong> Unlimited</p><p><strong><i class="fa-solid fa-gauge-high"></i> Speed:</strong> Up to 4000,000/second</p><p><strong><i class="fa-solid fa-file-zipper"></i> File Compression:</strong> Best</p><p><strong style="color:#0ff">Minimum Device Spec:</strong></p><p><strong><i class="fa-solid fa-microchip"></i> CPU:</strong> 8-core, 8-thread</p><p><strong><i class="fa-solid fa-memory"></i> Memory:</strong> 16GB</p><p class="warning-message"><i class="fa-solid fa-triangle-exclamation"></i> Please select a mode that matches your device specifications. Generating a large number of combinations can be very resource-intensive and may cause your browser to crash or become unresponsive if your device is not powerful enough.</p>',modeStatus.innerHTML='<i class="fa-solid fa-circle" style="color:#ff3300"></i>',modeSpecs.style.cssText="background:rgba(255, 99, 71, 0.2); box-shadow: 0 0 5px 2px rgba(255, 99, 71, 0.8); border-left: 4px solid #ff3300;";break;case"balance":e='<h3 style="color:#ffff00">Balance Mode Details</h3><strong style="color:#0ff;">Features:</strong></p><p><strong><i class="fa-solid fa-list-check"></i> Active Tasks:</strong> 3</p><p><strong><i class="fa-solid fa-wand-magic-sparkles"></i> Max Variations:</strong> 2,000,000</p><p><strong><i class="fa-solid fa-gauge-high"></i> Speed:</strong> Up to 450,000/second</p><p><strong><i class="fa-solid fa-file-zipper"></i> File Compression:</strong> Normal</p><p><strong style="color:#0ff">Minimum Device Spec:</strong></p><p><strong><i class="fa-solid fa-microchip"></i> CPU:</strong> 4-core, 4-thread</p><p><strong><i class="fa-solid fa-memory"></i> Memory:</strong> 8GB</p>',modeStatus.innerHTML='<i class="fa-solid fa-circle" style="color:#ffff00"></i>',modeSpecs.style.cssText="background:rgba(255, 190, 0, 0.1); box-shadow: 0 0 5px 2px rgba(255, 255, 0, 0.5); border-left: 4px solid #ffff00;";break;case"slow":e='<h3 style="color:#53ff1a">Slow Mode Details</h3><strong style="color:#0ff;">Features:</strong></p><p><strong><i class="fa-solid fa-list-check"></i> Active Tasks:</strong> 1</p><p><strong><i class="fa-solid fa-wand-magic-sparkles"></i> Max Variations:</strong> 250,000</p><p><strong><i class="fa-solid fa-gauge-high"></i> Speed:</strong> Up to 10,000/second</p><p><strong><i class="fa-solid fa-file-zipper"></i> File Compression:</strong> Low</p><p><strong style="color:#0ff">Minimum Device Spec:</strong></p><p><strong><i class="fa-solid fa-microchip"></i> CPU:</strong> 2-core, 4-thread</p><p><strong><i class="fa-solid fa-memory"></i> Memory:</strong> 4GB</p>',modeStatus.innerHTML='<i class="fa-solid fa-circle" style="color:#53ff1a"></i>',modeSpecs.style.cssText="background:rgba(0, 255, 0, 0.1); box-shadow: 0 0 5px 2px rgba(0, 255, 0, 0.5); border-left: 4px solid #53ff1a;"}modeSpecs.innerHTML=e}function getMode(){let e=null;return document.querySelectorAll('input[name="mode"]').forEach((t=>{t.checked&&(e=t.value)})),e}async function getConfig(){accessToken||(accessToken=await getAccessToken());const e=getMode();console.log("selected mode:",e);const t=await fetch(`${SERVER_URL}/get-configs`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${accessToken}`},body:JSON.stringify({mode:e})});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const a=await t.json();return{maxConcurrentTasks:a.maxConcurrentTasks,chunkLimit:a.chunkLimit,allDownloadFilename:a.allDownloadFilename,singleDownloadFilename:a.singleDownloadFilename,nextTaskDelay:a.nextTaskDelay,compressionLevel:a.compressionLevel,maxCombinationsPerEmail:a.maxCombinationsPerEmail,delayPerChunk:a.delayPerChunk}}async function getAccessToken(){const e=await fetch(`${SERVER_URL}/get-accessToken`);return(await e.json()).accessToken}async function createWorker(){if(!accessToken)return void console.error("Unauthorized");const e=cacheUtils.get("worker_code");if(e){const t=new Blob([e],{type:"application/javascript"});cachedWorkerCode=URL.createObjectURL(t)}else if(!cachedWorkerCode){const e=await fetch(`${SERVER_URL}/wc`,{headers:{Authorization:`Bearer ${accessToken}`}});if(!e.ok)throw new Error("Failed to load worker code");const t=await e.text();cacheUtils.set("worker_code",t);const a=new Blob([t],{type:"application/javascript"});cachedWorkerCode=URL.createObjectURL(a)}const t=new Worker(cachedWorkerCode);return t.onmessage=function(e){const{type:t,data:a}=e.data;switch(t){case"chunk":processWorkerChunk(a);break;case"error":handleWorkerError(a.email,a.message)}},t.onerror=function(e){let a=null;for(let[e,n]of activeWorkers)if(n===t){a=e;break}handleWorkerError(a,"Worker error: "+e.message)},t}function processWorkerChunk(e){if(!accessToken)return void console.error("Unauthorized");const{combinations:t,total:a,chunk:n,hasMore:s,email:o}=e,i=emailTasks.get(o);if(!i){const e=activeWorkers.get(o);return void(e&&e.terminate())}i.combinations=[...i.combinations,...t],i.totalCombinations=a,i.processedCount=i.combinations.length;const r=Math.min(100,Math.round(i.processedCount/a*100));i.progressBar.style.width=r+"%",i.progressBar.textContent=r+"%";const l=(Date.now()-i.startTime)/1e3,d=Math.round(i.processedCount/l);i.details.innerHTML=`<div>Generated: ${i.processedCount}/${a}</div><div>Speed: ${d}/sec</div>`,s&&isProcessing&&"processing"===i.status?setTimeout((()=>{isProcessing&&emailTasks.has(o)&&activeWorkers.has(o)&&activeWorkers.get(o).postMessage({type:"generate",data:{email:o,chunk:n+1,limit:CHUNK_LIMIT,maxCombinations:MAX_COMBINATIONS}})}),CHUNK_DELAY):finishEmailTask(o),updateGlobalProgress()}async function handleWorkerError(e,t){appConfig||(appConfig=await getConfig());const a=appConfig.nextTaskDelay,n=emailTasks.get(e),s=activeWorkers.get(e);n?(n.status="error",n.details.textContent="Error: "+t,n.progressBar.style.background="#ff4d4d",n.element.classList.remove("active-task"),s&&(s.terminate(),activeWorkers.delete(e)),currentProcessingBatch.delete(e),completedTasks++,updateGlobalProgress(),0===currentProcessingBatch.size&&isBatchCurrentlyActive&&(isBatchCurrentlyActive=!1,currentEmailQueueIndex<emailQueue.length&&setTimeout(startNextBatch,a))):s&&s.terminate()}function createEmailTask(e,t){if(!accessToken)return void console.error("Unauthorized");const a=document.createElement("div");a.className="email-task",taskHtml=appConfig.taskHtml,a.innerHTML=`<div class="email-header"><div class="task-number">${t}</div><div class="email-address">${e}</div></div><div class="email-progress"><div class="progress-bar-container"><div class="progress-bar"></div></div></div><div class="task-actions"><div class="email-details">In queue...</div><button class="download-btn" disabled><i class="fa-regular fa-clock"></i> Pending...</button></div>`;const n={element:a,email:e,combinations:[],totalCombinations:0,processedCount:0,status:"pending",startTime:Date.now(),progressBar:a.querySelector(".progress-bar"),details:a.querySelector(".email-details"),downloadBtn:a.querySelector(".download-btn"),taskNumber:a.querySelector(".task-number")};return n.downloadBtn.addEventListener("click",(()=>{downloadEmailResults(e),n.downloadBtn.disabled=!0,n.downloadBtn.innerHTML='<i class="fa-solid fa-file-circle-check" style="color:#00ffff"></i> Downloaded'})),emailTasks.set(e,n),emailTasksContainer.appendChild(a),n}async function startNextBatch(){if(!isProcessing||isBatchCurrentlyActive||currentEmailQueueIndex>=emailQueue.length)return;isBatchCurrentlyActive=!0,currentProcessingBatch.clear();let e=0;for(;e<MAX_CONCURRENT_TASKS&&currentEmailQueueIndex<emailQueue.length;){const t=emailQueue[currentEmailQueueIndex],a=emailTasks.get(t);if(a&&"pending"===a.status){a.downloadBtn.innerHTML='<i class="fa-solid fa-hourglass-start"></i> Generating...',a.status="processing",a.startTime=Date.now(),a.element.classList.add("active-task");const n=await createWorker();activeWorkers.set(t,n),currentProcessingBatch.add(t),n.postMessage({type:"generate",data:{email:t,chunk:0,limit:CHUNK_LIMIT,maxCombinations:MAX_COMBINATIONS}}),e++}currentEmailQueueIndex++}updateGlobalProgress()}async function finishEmailTask(e){if(!accessToken)return void console.error("Unauthorized");appConfig||(appConfig=await getConfig());const t=appConfig.nextTaskDelay,a=emailTasks.get(e),n=activeWorkers.get(e);if(a){try{const t=new JSZip;t.file(e+appConfig.singleDownloadFilename,a.combinations.join("\n")),a.downloadBtn.innerHTML='<div><i class="fa-solid fa-spinner"></i> Preparing file...</div>',a.details.innerHTML=`<div>Generated: ${a.processedCount}/${a.totalCombinations}</div><div>Speed: 0/sec</div>`,a.taskNumber.style.cssText="box-shadow: 0 0 10px 2px rgba(77, 210, 255, 0.5);color:#00ffff;";const n=await t.generateAsync({type:"blob",compression:"DEFLATE",compressionOptions:{level:appConfig.compressionLevel}});await saveToIndexedDB(e,{combinations:a.combinations,compressedData:n}),a.combinations=[]}catch(t){console.error("IndexedDB error:",t),await saveToIndexedDB(e,{combinations:a.combinations,compressedData:null})}a.status="completed",a.details.style.color="#66ffd9",a.details.innerHTML=`<i class="fa-solid fa-check"></i> Generated: ${a.totalCombinations} Gmail Dots`,a.progressBar.style.background="linear-gradient(90deg, rgba(0, 255, 212, 0.1), rgba(0, 255, 212, 0.3), rgba(0, 255, 212, 0.5))",a.downloadBtn.innerHTML='<div title="download as TXT file"><i class="fa-solid fa-download"></i> Download (TXT)</div>',a.downloadBtn.disabled=!1,a.element.classList.remove("active-task"),n&&(n.terminate(),activeWorkers.delete(e)),currentProcessingBatch.delete(e),completedTasks++,updateGlobalProgress(),0===currentProcessingBatch.size&&isBatchCurrentlyActive&&(isBatchCurrentlyActive=!1,currentEmailQueueIndex<emailQueue.length&&setTimeout(startNextBatch,t))}}function updateGlobalProgress(){if(!accessToken)return void console.error("Unauthorized");if(0===totalTasks)return void(globalProgress.textContent="");const e=e=>1===e?"email":"emails",t=Math.round(completedTasks/totalTasks*100);globalProgress.textContent=`Overall Progress: ${completedTasks}/${totalTasks} ${e(completedTasks)} completed (${t}%)`,completedTasks<totalTasks&&requestScroll(),completedTasks===totalTasks&&(isProcessing=!1,globalProgress.style.color="#fff",globalProgress.innerHTML=`<div style="color:#00ffff">Completed!</div><div>Total processed: ${completedTasks} of ${totalTasks} ${e(totalTasks)}.</div>`,downloadAllBtn.innerHTML='<span title="download as ZIP file"><i class="fa-solid fa-file-zipper"></i> Download All (ZIP)</span>',downloadAllBtn.style.cssText="cursor: pointer",downloadAllBtn.disabled=!1,actionBtn.classList.remove("hidden"),resetBtn.disabled=!1,resetBtn.style.cssText="background: rgba(255, 142, 134, 0.2); box-shadow: 0 0 10px 2px rgba(255, 142, 177, 0.8);")}function scrollToActiveTask(){const e=Array.from(emailTasksContainer.children);for(const t of e){const e=t.querySelector(".email-address")?.textContent.trim(),a=e?emailTasks.get(e):null;if(a&&"completed"!==a.status)return void setTimeout((()=>{t.scrollIntoView({behavior:"smooth",block:"center"})}),100)}if(e.length>0){const t=e[e.length-1];setTimeout((()=>{t.scrollIntoView({behavior:"smooth",block:"center"})}),100)}}function requestScroll(){let e=!1;e||(e=!0,setTimeout((()=>{scrollToActiveTask(),e=!1}),200))}function saveAs(e,t){if(!accessToken)return void console.error("Unauthorized");const a=document.createElement("a");a.href=URL.createObjectURL(e),a.download=t,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(a.href)}async function downloadEmailResults(e){if(!accessToken)return void console.error("Unauthorized");appConfig||(appConfig=await getConfig());const t=await getFromIndexedDB(e);if(!t||!t.combinations||0===t.combinations.length)return void alert("No data available for "+e);const a=t.combinations.join("\n");saveAs(new Blob([a],{type:"text/plain"}),e+appConfig.singleDownloadFilename)}async function downloadAllResults(e){if(0===completedTasks)return;if(!accessToken)return void console.error("Unauthorized");const t=document.querySelectorAll(".download-btn"),a=e=>1===e?"email":"emails";appConfig||(appConfig=await getConfig()),globalProgress.innerHTML='<div><i class="fa-solid fa-spinner" style="color:#fff"></i> Creating ZIP archive...</div>',globalProgress.style.cssText="font-size: 1rem; color: #ffff00",downloadAllBtn.innerHTML=`<div><i class="fa-solid fa-spinner"></i> Processing download <span style="color:#00ffff">${totalTasks}</span> ${a(totalTasks)}...</div><div style="color: #ff3300; text-shadow: 2px 2px 5px red #000; font-weight:900"><i class="fa-regular fa-clock" style="color:#fff"></i> This process may take a few minutes!</div>`,downloadAllBtn.style.cssText="display: flex; flex-direction: column; gap: 5px; background: rgba(0, 0, 0, 0.7); box-shadow: 0 0 5px 1px rgba(130, 72, 179, 0.5); color: #fff; padding: 5px; font-size: 0.8rem;",downloadAllBtn.disabled=!0,resetBtn.disabled=!0,t.forEach((e=>{e.disabled=!0}));const n=await getAllFromIndexedDB();if(0===n.length)return alert("No completed email data to download."),resetBtn.disabled=!1,downloadAllBtn.disabled=!1,downloadAllBtn.innerHTML='<span title="download as ZIP file"><i class="fa-solid fa-file-zipper"></i> Download All (ZIP)</span>',void(downloadAllBtn.style.color="#fff");try{const e=n.map((e=>{if(e.compressedData)return{name:e.email+appConfig.singleDownloadFilename.replace(".txt",".zip"),lastModified:new Date,input:e.compressedData};{const t=e.combinations.join("\n");return{name:e.email+appConfig.singleDownloadFilename,lastModified:new Date,input:t}}})),{downloadZip:s}=await import("../lib/clientZip.js"),o=await s(e).blob(),i=new Date;saveAs(o,`${n.length}-Gmail_Dot_Tricks-${i.toLocaleDateString()}-${i.toLocaleTimeString().replace(/:/g,"-")}.zip`),t.forEach((e=>{e.innerHTML='<i class="fa-solid fa-file-circle-check" style="color:#00ffff"></i> Downloaded'})),await clearAllIndexedDB(),resetBtn.disabled=!1,globalProgress.textContent="",globalProgress.style.cssText="",downloadAllBtn.style.cssText="",downloadAllBtn.style.color="#fff",downloadAllBtn.innerHTML=`<i class="fa-solid fa-circle-info"></i> <span style="color:#00ffff">${n.length}</span> ${a(n.length)} successfully downloaded!`}catch(t){console.error("Error creating ZIP file:",t),downloadAllBtn.textContent="Error creating ZIP file. Please try again.",downloadAllBtn.disabled=!1}}function verifyInput(){let e=emailsInput.value.split("\n").some((e=>e.trim().length>0));downloadAllBtn.style.cssText="background: #52527a; border:none; box-shadow: 0 0 10px 2px rgba(255, 255, 255, 0.5); color: #fff",downloadAllBtn.innerHTML='<i class="fa-solid fa-spinner"></i> Validating input...',globalProgress.textContent="Please wait...",setTimeout((()=>{e?(checkInvalidEmails(),checkDuplicates()):(generateBtn.style.color="",generateBtn.disabled=!0,generateBtn.classList.remove("hidden"),resetBtn.classList.remove("hidden"),landingPage.classList.remove("hidden"),modeBtn.classList.remove("hidden"),removeDuplicatesBtn.classList.add("hidden"),downloadAllBtn.style.cssText="background: linear-gradient(90deg, rgba(130, 72, 179, 0.5), #000); border:none; box-shadow: 0 0 5px 1px rgba(255, 190, 0, 0.5); color: #ffeb99",downloadAllBtn.innerHTML='<i class="fa-solid fa-circle-info"></i> Please enter an email!',globalProgress.textContent="Input is empty!",errorEmailOverlay.classList.add("hidden"),removeInvalidBtn.classList.add("hidden"))}),500)}function handleInputValue(){emailsInput.value.split("\n").some((e=>e.trim().length>0))?(downloadAllBtn.innerHTML='<i class="fa-solid fa-circle-info"></i> Click "Generate" to start!',generateBtn.style.color="#00ffff",generateBtn.disabled=!1,globalProgress.textContent="",downloadAllBtn.style.cssText="background: linear-gradient(90deg, #52527a, transparent); border:none; box-shadow: 0 0 10px 2px rgba(255, 255, 255, 0.5); color: #fff"):(downloadAllBtn.style.cssText="background: transparent; border:none; box-shadow: none;color:#9999ff; font-weight: 200",generateBtn.style.color="",generateBtn.disabled=!0,downloadAllBtn.textContent="Waiting for result...")}function checkDuplicates(){const e=emailsInput.value.split("\n").map((e=>e.trim())).filter((e=>e.length>0&&isValidGmail(e))),t=new Set,a=[];for(const n of e){const e=n.split("@")[0].replace(/\./g,"").toLowerCase();t.has(e)?a.push(n):t.add(e)}return 0===a.length?(removeDuplicatesBtn.classList.add("hidden"),checkInvalidEmails()):(landingPage.classList.add("hidden"),modeSelection.classList.add("hidden"),modeBtn.classList.add("hidden"),errorEmailOverlay.classList.remove("hidden"),errorEmailList.innerHTML=a.map((e=>`<div class="duplicate-item">${e} <span style="color:#cc99ff">(Duplicate)</span></div>`)).join(""),globalProgress.textContent="Error: Duplicate Emails Found!",downloadAllBtn.innerHTML='<i class="fa-solid fa-circle-info"></i> Invalid input!',downloadAllBtn.style.cssText="background: linear-gradient(90deg, rgba(130, 72, 179, 0.5), #000); border:none; box-shadow: 0 0 5px 1px rgba(255, 99, 71, 0.8); color: #ff6600",removeInvalidBtn.classList.add("hidden"),removeDuplicatesBtn.classList.remove("hidden"),generateBtn.classList.add("hidden"),resetBtn.classList.add("hidden"),!1)}function checkInvalidEmails(){const e=emailsInput.value.split("\n").map((e=>e.trim())).filter((e=>e.length>0)),t=[];for(const a of e){if((a.match(/@/g)||[]).length>1){t.push({email:a,msg:"Invalid email format - there is more than 1 email in 1 line"});continue}if(!a.includes("@")){t.push({email:a,msg:"Invalid email format - Missing @gmail.com"});continue}const e=a.split("@"),n=e[0];"gmail.com"===e[1].toLowerCase()?0===n.length?t.push({email:a,msg:"Invalid email format - at least 1 character before @gmail.com"}):/^[a-zA-Z0-9]+$/.test(n)||t.push({email:a,msg:"Invalid email adress - Only letters and numbers before @gmail.com"}):t.push({email:a,msg:"Invalid domain suffix - Only @gmail.com allowed"})}return 0===t.length?(errorEmailOverlay.classList.add("hidden"),removeInvalidBtn.classList.add("hidden"),generateBtn.classList.remove("hidden"),resetBtn.classList.remove("hidden"),landingPage.classList.remove("hidden"),modeBtn.classList.remove("hidden"),globalProgress.textContent="",downloadAllBtn.innerHTML='<i class="fa-solid fa-circle-info"></i> Click "Generate" to start!',downloadAllBtn.style.cssText="background: linear-gradient(90deg, #52527a, transparent); border:none; box-shadow: 0 0 10px 2px rgba(255, 255, 255, 0.5); color: #fff",!0):(landingPage.classList.add("hidden"),errorEmailOverlay.classList.remove("hidden"),modeBtn.classList.add("hidden"),modeSelection.classList.add("hidden"),errorEmailList.innerHTML=t.map((e=>`<div class="invalid-item">${e.email} <span style="color:#cc99ff">(${e.msg})</span></div>`)).join(""),removeInvalidBtn.classList.remove("hidden"),removeInvalidBtn.textContent=`Remove invalid ${1===t.length?"email":"emails"} to continue!`,globalProgress.textContent=`Error: Found ${t.length} invalid ${1===t.length?"email":"emails"}`,generateBtn.classList.add("hidden"),resetBtn.classList.add("hidden"),downloadAllBtn.innerHTML='<i class="fa-solid fa-circle-info"></i> Invalid input!',downloadAllBtn.style.cssText="background: linear-gradient(90deg, #52527a, #000); border:none; box-shadow: 0 0 5px 1px rgba(255, 99, 71, 0.8); color: #ff6600",!1)}function isValidGmail(e){const t=e.trim();return/^[a-zA-Z0-9]+@gmail\.com$/i.test(t)}function updateLineNumbers(){const e=emailsInput.value.split("\n");let t="";for(let a=1;a<=Math.max(1,e.length);a++)t+=a+"<br>";lineNumbers.innerHTML=t,emailsInput.scrollTop=emailsInput.scrollHeight}async function clearIndexedDb(){try{await openDatabase(),await clearAllIndexedDB(),await cleanupExpiredData()}catch(e){console.error("Gagal inisialisasi database:",e)}}function clearInput(){emailsInput.value="",emailsInput.readOnly=!1,emailsInput.addEventListener("input",(function(){handleInputValue(),updateLineNumbers()})),handleInputValue(),updateLineNumbers()}function clearUi(){setTimeout((()=>{appInfo.scrollIntoView({behavior:"smooth",block:"center"})}),100),resetBtn.style.cssText="",generateBtn.textContent="Generate",globalProgress.style.color="#ffeb99",emailTasksContainer.innerHTML="",emailTasksContainer.classList.add("hidden"),landingPage.classList.remove("hidden"),modeBtn.classList.remove("hidden"),modeSelection.classList.add("hidden"),generateBtn.classList.remove("hidden"),generateBtn.disabled=!0,resetBtn.disabled=!1,modeBtn.disabled=!1,globalProgress.textContent="",globalProgress.textContent=""}function clearTask(){isProcessing=!1;for(let e of activeWorkers.values())e.terminate();activeWorkers.clear(),emailTasks.clear(),emailQueue=[],currentProcessingBatch.clear(),isBatchCurrentlyActive=!1,completedTasks=0,totalTasks=0,currentEmailQueueIndex=0}async function initDotTrick(){await clearIndexedDb(),clearInput(),clearTask(),clearUi(),getMode(),updateModeSpecs()}generateBtn.addEventListener("click",(async function(){if(isProcessing)return;if(!checkDuplicates()||!checkInvalidEmails())return verifyInput(),void emailsInput.addEventListener("input",(function(){verifyInput(),updateLineNumbers()}));generateBtn.disabled=!0,resetBtn.disabled=!0,modeBtn.disabled=!0;const e=emailsInput.value.split("\n").map((e=>e.trim())).filter((e=>e.length>0));if(0!==e.length){appConfig||(appConfig=await getConfig()),CHUNK_DELAY=appConfig.delayPerChunk,MAX_COMBINATIONS=appConfig.maxCombinationsPerEmail,MAX_CONCURRENT_TASKS=appConfig.maxConcurrentTasks,CHUNK_LIMIT=appConfig.chunkLimit,emailTasks.clear();for(let e of activeWorkers.values())e.terminate();activeWorkers.clear(),emailsInput.readOnly=!0,generateBtn.classList.add("hidden"),modeBtn.classList.add("hidden"),modeSelection.classList.add("hidden"),actionBtn.classList.add("hidden"),landingPage.classList.add("hidden"),emailTasksContainer.classList.remove("hidden"),currentProcessingBatch.clear(),isBatchCurrentlyActive=!1,completedTasks=0,totalTasks=e.length,currentEmailQueueIndex=0,isProcessing=!0,downloadAllBtn.innerHTML='<strong><i class="fa-solid fa-envelope"></i> Generating...</strong>',globalProgress.textContent=`Starting ${totalTasks} email ${t=totalTasks,1===t?"task":"tasks"}...`,emailQueue=[],e.forEach(((e,t)=>{createEmailTask(e,t+1),emailQueue.push(e)})),startNextBatch(),updateGlobalProgress()}else alert("Please enter at least one email!");var t})),resetBtn.addEventListener("click",(async function(){await initDotTrick()})),downloadAllBtn.addEventListener("click",downloadAllResults),updateLineNumbers(),emailsInput.addEventListener("scroll",(function(){lineNumbers.scrollTop=this.scrollTop})),removeDuplicatesBtn.addEventListener("click",(async function(){const e=emailsInput.value.split("\n").map((e=>e.trim())).filter((e=>e.length>0)),t=new Set,a=[],n=/^[a-zA-Z0-9]+@gmail\.com$/i;e.forEach((e=>{if(!n.test(e)||e.split("@")[0].includes("+")||e.split("@")[0].includes("."))a.push(e);else{const n=e.toLowerCase().split("@")[0].replace(/\./g,"").split("+")[0];t.has(n)||(t.add(n),a.push(e))}})),emailsInput.value=a.join("\n"),verifyInput(),updateLineNumbers(),errorEmailOverlay.classList.add("hidden"),removeDuplicatesBtn.classList.add("hidden")})),removeInvalidBtn.addEventListener("click",(async function(){const e=emailsInput.value.split("\n").map((e=>e.trim())).filter((e=>e.length>0)),t=[];for(const a of e){if((a.match(/@/g)||[]).length>1)continue;if(!a.includes("@"))continue;const e=a.split("@"),n=e[0];"gmail.com"===e[1].toLowerCase()&&0!==n.length&&/^[a-zA-Z0-9]+$/.test(n)&&t.push(a)}emailsInput.value=t.join("\n"),verifyInput(),updateLineNumbers(),errorEmailOverlay.classList.add("hidden"),removeInvalidBtn.classList.add("hidden")})),modeBtn.addEventListener("click",(function(){setTimeout((()=>{selectModeH2.scrollIntoView({behavior:"smooth",block:"center"})}),100),modeSelection.classList.remove("hidden"),landingPage.classList.add("hidden"),updateModeSpecs()})),window.addEventListener("resize",updateLineNumbers),document.addEventListener("visibilitychange",updateLineNumbers),document.querySelectorAll('input[name="mode"]').forEach((e=>{e.addEventListener("change",(()=>{appConfig=null,getMode(),updateModeSpecs()}))})),initDotTrick();